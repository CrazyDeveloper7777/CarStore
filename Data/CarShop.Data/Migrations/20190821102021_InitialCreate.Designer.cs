// <auto-generated />
using System;
using CarShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarShop.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190821102021_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarShop.Data.Models.Ads.Ad", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DealerId")
                        .IsRequired();

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("PhoneNumber2");

                    b.Property<string>("PhoneNumber3");

                    b.Property<string>("PopulatedPlace")
                        .IsRequired();

                    b.Property<string>("Region")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Ad");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Ad");
                });

            modelBuilder.Entity("CarShop.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CarShop.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhoneNumber2");

                    b.Property<string>("PhoneNumber3");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CarShop.Data.Models.Images.Image", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("AdId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CarShop.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("CarShop.Data.Models.Vehicles.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BaseImageUrl")
                        .IsRequired();

                    b.Property<string>("Brand")
                        .IsRequired();

                    b.Property<string>("Color")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("Currency");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("EngineType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ManufacturedOn");

                    b.Property<string>("Model")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("OwnerId");

                    b.Property<int>("Power");

                    b.Property<int>("Price");

                    b.Property<int>("Run");

                    b.Property<int>("State");

                    b.Property<int>("Transmission");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OwnerId");

                    b.ToTable("Vehicles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CarShop.Data.Models.Ads.BusAd", b =>
                {
                    b.HasBaseType("CarShop.Data.Models.Ads.Ad");

                    b.Property<string>("BusId")
                        .IsRequired();

                    b.HasIndex("BusId");

                    b.HasDiscriminator().HasValue("BusAd");
                });

            modelBuilder.Entity("CarShop.Data.Models.Ads.CarAd", b =>
                {
                    b.HasBaseType("CarShop.Data.Models.Ads.Ad");

                    b.Property<string>("CarId")
                        .IsRequired();

                    b.HasIndex("CarId");

                    b.HasDiscriminator().HasValue("CarAd");
                });

            modelBuilder.Entity("CarShop.Data.Models.Ads.MotorcycleAd", b =>
                {
                    b.HasBaseType("CarShop.Data.Models.Ads.Ad");

                    b.Property<string>("MotorcycleId")
                        .IsRequired();

                    b.HasIndex("MotorcycleId");

                    b.HasDiscriminator().HasValue("MotorcycleAd");
                });

            modelBuilder.Entity("CarShop.Data.Models.Ads.TruckAd", b =>
                {
                    b.HasBaseType("CarShop.Data.Models.Ads.Ad");

                    b.Property<string>("TruckId")
                        .IsRequired();

                    b.HasIndex("TruckId");

                    b.HasDiscriminator().HasValue("TruckAd");
                });

            modelBuilder.Entity("CarShop.Data.Models.Vehicles.Bus", b =>
                {
                    b.HasBaseType("CarShop.Data.Models.Vehicles.Vehicle");

                    b.Property<int>("AxlesCount");

                    b.Property<int>("LoadInKg");

                    b.Property<int>("SeatsCount");

                    b.HasDiscriminator().HasValue("Bus");
                });

            modelBuilder.Entity("CarShop.Data.Models.Vehicles.Car", b =>
                {
                    b.HasBaseType("CarShop.Data.Models.Vehicles.Vehicle");

                    b.HasDiscriminator().HasValue("Car");
                });

            modelBuilder.Entity("CarShop.Data.Models.Vehicles.Motorcycle", b =>
                {
                    b.HasBaseType("CarShop.Data.Models.Vehicles.Vehicle");

                    b.Property<int>("CubicMeter");

                    b.Property<int>("TactsOfEngine");

                    b.Property<int>("TypeOfCooling");

                    b.HasDiscriminator().HasValue("Motorcycle");
                });

            modelBuilder.Entity("CarShop.Data.Models.Vehicles.Truck", b =>
                {
                    b.HasBaseType("CarShop.Data.Models.Vehicles.Vehicle");

                    b.Property<int>("AxlesCount")
                        .HasColumnName("Truck_AxlesCount");

                    b.Property<int>("LoadInKg")
                        .HasColumnName("Truck_LoadInKg");

                    b.Property<int>("SeatsCount")
                        .HasColumnName("Truck_SeatsCount");

                    b.HasDiscriminator().HasValue("Truck");
                });

            modelBuilder.Entity("CarShop.Data.Models.Ads.Ad", b =>
                {
                    b.HasOne("CarShop.Data.Models.ApplicationUser", "Dealer")
                        .WithMany("Ads")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CarShop.Data.Models.Images.Image", b =>
                {
                    b.HasOne("CarShop.Data.Models.Ads.Ad", "Ad")
                        .WithMany("Images")
                        .HasForeignKey("AdId");
                });

            modelBuilder.Entity("CarShop.Data.Models.Vehicles.Vehicle", b =>
                {
                    b.HasOne("CarShop.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CarShop.Data.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarShop.Data.Models.ApplicationUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarShop.Data.Models.ApplicationUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CarShop.Data.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarShop.Data.Models.ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarShop.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CarShop.Data.Models.Ads.BusAd", b =>
                {
                    b.HasOne("CarShop.Data.Models.Vehicles.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CarShop.Data.Models.Ads.CarAd", b =>
                {
                    b.HasOne("CarShop.Data.Models.Vehicles.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CarShop.Data.Models.Ads.MotorcycleAd", b =>
                {
                    b.HasOne("CarShop.Data.Models.Vehicles.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CarShop.Data.Models.Ads.TruckAd", b =>
                {
                    b.HasOne("CarShop.Data.Models.Vehicles.Truck", "Truck")
                        .WithMany()
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
